<?xml version="1.0" ?>
<zabbix_export>
	<version>3.4</version>
	<date>2017-01-01T01:01:01Z</date>
	<groups>
		<group>
			<name>Templates</name>
		</group>
	</groups>
	<templates>
		<template>
			<template>GTS-IS Template Virt VMware VROPS</template>
			<name>GTS-IS Template Virt VMware VROPS</name>
			<description>WARNING!!! This template MUST be associated with a ZABBIX PROXY who will access the VROPS server. Data collection is done entirely via API.
=============================================================
About the macros:
{$IGNORE_ALERT_LEVEL}:
 - Add as value a comma separated list of the level names to ignore when processing alerts discoveries. 
 - Values are found in VROPS API URL &quot;http://&lt;VROPS&gt;/suite-api/api/alerts&quot;
 - E.g. (contains all available levels): INFORMATIONAL, WARNING, IMMEDIATE, CRITICAL
{$IGNORE_ALERT_TYPE}:
 - Add as value a comma separated list of the type names to ignore when processing alerts discoveries. 
 - Values are found in VROPS API URL &quot;http://&lt;VROPS&gt;/suite-api/api/alerts/types&quot;
 - E.g. (contains all available types): Application Alerts, Network Alerts, Storage Alerts, Virtualization/Hypervisor Alerts, Hardware (OSI) Alerts
{$IGNORE_ALERT_SUBTYPE}:
 - Add as value a comma separated list of the subtype names to ignore when processing alerts discoveries. 
 - Values are found in VROPS API URL &quot;http://&lt;VROPS&gt;/suite-api/api/alerts/types&quot;
 - E.g. (contains all available subtypes): Availability, Capacity, Compliance, Configuration, Performance
{$IGNORE_ALERT_RESTYPE}:
 - Add as value a comma separated list of the resource/resourceKey/resourceKindKey values to ignore when processing alerts discoveries. 
 - Values are found in VROPS API URL &quot;http://&lt;VROPS&gt;/suite-api/api/alerts/resources&quot;
 - E.g. (check API for all values): VirtualMachine, Datastore, LogicalRouter, VirtualSANDCCluster, L2VPNEdgeService</description>
			<groups>
				<group>
					<name>Templates</name>
				</group>
			</groups>
			<applications>
				<application>
					<name>Data Collection</name>
				</application>
				<application>
					<name>Host Status</name>
				</application>
				<application>
					<name>VROPS Alerts</name>
				</application>
			</applications>
			<items>
				<item>
					<name>VROPS host status (ping to {$VROPS_IP})</name>
					<type>0</type>
					<snmp_community/>
					<snmp_oid/>
					<key>ping_ip[{$VROPS_IP}]</key>
					<delay>30s</delay>
					<history>1w</history>
					<trends>60d</trends>
					<status>0</status>
					<value_type>3</value_type>
					<allowed_hosts/>
					<units/>
					<snmpv3_contextname/>
					<snmpv3_securityname/>
					<snmpv3_securitylevel>0</snmpv3_securitylevel>
					<snmpv3_authprotocol>0</snmpv3_authprotocol>
					<snmpv3_authpassphrase/>
					<snmpv3_privprotocol>0</snmpv3_privprotocol>
					<snmpv3_privpassphrase/>
					<params/>
					<ipmi_sensor/>
					<authtype>0</authtype>
					<username/>
					<password/>
					<publickey/>
					<privatekey/>
					<port/>
					<description/>
					<inventory_link>0</inventory_link>
					<applications>
						<application>
							<name>Host Status</name>
						</application>
					</applications>
					<valuemap>
						<name>Host availability</name>
					</valuemap>
					<logtimefmt/>
					<preprocessing/>
					<jmx_endpoint/>
					<master_item/>
				</item>
				<item>
					<name>Create alerts datafile</name>
					<type>13</type>
					<snmp_community/>
					<snmp_oid/>
					<key>ssh.run[createAlertsDatafile]</key>
					<delay>60s;m0-59s0</delay>
					<history>1d</history>
					<trends>0</trends>
					<status>0</status>
					<value_type>4</value_type>
					<allowed_hosts/>
					<units/>
					<snmpv3_contextname/>
					<snmpv3_securityname/>
					<snmpv3_securitylevel>0</snmpv3_securitylevel>
					<snmpv3_authprotocol>0</snmpv3_authprotocol>
					<snmpv3_authpassphrase/>
					<snmpv3_privprotocol>0</snmpv3_privprotocol>
					<snmpv3_privpassphrase/>
					<params>#!/bin/bash
cd /var/Collector
sudo cat &lt;&lt;EOF | sudo python -

#!/usr/bin/python

import requests
import json
import os.path
import modules.log.syslog as syslog
import xml.dom.minidom

logger = syslog.getLogger(__name__)

def getResponse(server, opt=None, userId=None, userPw=None):
    logger.info(&quot;Starting getResponse()...&quot;)
    session = requests.Session()
    session.auth = (userId, userPw)
    auth = session.post(&quot;https://&quot; + server, verify=False)
    response = session.get(&quot;https://&quot; + server + &quot;/&quot; + opt, verify=False)
    return response.content


rawResponse = getResponse(&quot;{$VROPS_IP}&quot;, &quot;suite-api/api/alerts&quot;, &quot;{$VROPS_ID}&quot;, &quot;{$VROPS_PW}&quot;)
xmlResponse = xml.dom.minidom.parseString(rawResponse)
f = open(&quot;/var/Collector/data/vrops_alerts_{$VROPS_IP}.xml&quot;, 'w+')
#f = open(&quot;/var/Collector/data/vrops_alerts_{$VROPS_IP}.xml&quot;, os.O_SHLOCK|os.O_WRONLY)
f.write(xmlResponse.toprettyxml().encode('utf-8'))
f.close()
print(&quot;Alert collection complete&quot;)

EOF</params>
					<ipmi_sensor/>
					<authtype>0</authtype>
					<username>{$PROXY_SSH_ID}</username>
					<password>{$PROXY_SSH_PW}</password>
					<publickey/>
					<privatekey/>
					<port/>
					<description/>
					<inventory_link>0</inventory_link>
					<applications>
						<application>
							<name>Data Collection</name>
						</application>
					</applications>
					<valuemap/>
					<logtimefmt/>
					<preprocessing/>
					<jmx_endpoint/>
					<master_item/>
				</item>
				<item>
					<name>Create resources datafile</name>
					<type>13</type>
					<snmp_community/>
					<snmp_oid/>
					<key>ssh.run[createResourcesDatafile]</key>
					<delay>10m;m/10s0</delay>
					<history>1d</history>
					<trends>0</trends>
					<status>0</status>
					<value_type>4</value_type>
					<allowed_hosts/>
					<units/>
					<snmpv3_contextname/>
					<snmpv3_securityname/>
					<snmpv3_securitylevel>0</snmpv3_securitylevel>
					<snmpv3_authprotocol>0</snmpv3_authprotocol>
					<snmpv3_authpassphrase/>
					<snmpv3_privprotocol>0</snmpv3_privprotocol>
					<snmpv3_privpassphrase/>
					<params>#!/bin/bash
cd /var/Collector
sudo cat &lt;&lt;EOF | sudo python -

#!/usr/bin/python

import requests
import json
import os.path
import modules.log.syslog as syslog
import xml.dom.minidom

logger = syslog.getLogger(__name__)

def getResponse(server, opt=None, userId=None, userPw=None):
    logger.info(&quot;Starting getResponse()...&quot;)
    session = requests.Session()
    session.auth = (userId, userPw)
    auth = session.post(&quot;https://&quot; + server, verify=False)
    response = session.get(&quot;https://&quot; + server + &quot;/&quot; + opt, verify=False)
    return response.content


rawResponse = getResponse(&quot;{$VROPS_IP}&quot;, &quot;suite-api/api/resources&quot;, &quot;{$VROPS_ID}&quot;, &quot;{$VROPS_PW}&quot;)
xmlResponse = xml.dom.minidom.parseString(rawResponse)
f = open(&quot;/var/Collector/data/vrops_resources_{$VROPS_IP}.xml&quot;, 'w+')
#f = open(&quot;/var/Collector/data/vrops_resources_{$VROPS_IP}.xml&quot;, os.O_SHLOCK|os.O_WRONLY)
f.write(xmlResponse.toprettyxml().encode('utf-8'))
f.close()
print(&quot;Resources collection complete&quot;)

EOF</params>
					<ipmi_sensor/>
					<authtype>0</authtype>
					<username>{$PROXY_SSH_ID}</username>
					<password>{$PROXY_SSH_PW}</password>
					<publickey/>
					<privatekey/>
					<port/>
					<description/>
					<inventory_link>0</inventory_link>
					<applications>
						<application>
							<name>Data Collection</name>
						</application>
					</applications>
					<valuemap/>
					<logtimefmt/>
					<preprocessing/>
					<jmx_endpoint/>
					<master_item/>
				</item>
				<item>
					<name>Create type datafile</name>
					<type>13</type>
					<snmp_community/>
					<snmp_oid/>
					<key>ssh.run[createTypeDatafile]</key>
					<delay>1h;h/1s0</delay>
					<history>1d</history>
					<trends>0</trends>
					<status>0</status>
					<value_type>4</value_type>
					<allowed_hosts/>
					<units/>
					<snmpv3_contextname/>
					<snmpv3_securityname/>
					<snmpv3_securitylevel>0</snmpv3_securitylevel>
					<snmpv3_authprotocol>0</snmpv3_authprotocol>
					<snmpv3_authpassphrase/>
					<snmpv3_privprotocol>0</snmpv3_privprotocol>
					<snmpv3_privpassphrase/>
					<params>#!/bin/bash
cd /var/Collector
sudo cat &lt;&lt;EOF | sudo python -

#!/usr/bin/python

import requests
import json
import os.path
import modules.log.syslog as syslog
import xml.dom.minidom

logger = syslog.getLogger(__name__)

def getResponse(server, opt=None, userId=None, userPw=None):
    logger.info(&quot;Starting getResponse()...&quot;)
    session = requests.Session()
    session.auth = (userId, userPw)
    auth = session.post(&quot;https://&quot; + server, verify=False)
    response = session.get(&quot;https://&quot; + server + &quot;/&quot; + opt, verify=False)
    return response.content


rawResponse = getResponse(&quot;{$VROPS_IP}&quot;, &quot;/suite-api/api/alerts/types&quot;, &quot;{$VROPS_ID}&quot;, &quot;{$VROPS_PW}&quot;)
xmlResponse = xml.dom.minidom.parseString(rawResponse)
f = open(&quot;/var/Collector/data/vrops_types_{$VROPS_IP}.xml&quot;, 'w+')
f.write(xmlResponse.toprettyxml().encode('utf-8'))
f.close()
print(&quot;Type collection complete&quot;)

EOF</params>
					<ipmi_sensor/>
					<authtype>0</authtype>
					<username>{$PROXY_SSH_ID}</username>
					<password>{$PROXY_SSH_PW}</password>
					<publickey/>
					<privatekey/>
					<port/>
					<description/>
					<inventory_link>0</inventory_link>
					<applications>
						<application>
							<name>Data Collection</name>
						</application>
					</applications>
					<valuemap/>
					<logtimefmt/>
					<preprocessing/>
					<jmx_endpoint/>
					<master_item/>
				</item>
			</items>
			<discovery_rules>
				<discovery_rule>
					<name>Alerts</name>
					<type>13</type>
					<snmp_community/>
					<snmp_oid/>
					<key>ssh.run[discoverAlerts]</key>
					<delay>1m;m0-59s30</delay>
					<status>0</status>
					<allowed_hosts/>
					<snmpv3_contextname/>
					<snmpv3_securityname/>
					<snmpv3_securitylevel>0</snmpv3_securitylevel>
					<snmpv3_authprotocol>0</snmpv3_authprotocol>
					<snmpv3_authpassphrase/>
					<snmpv3_privprotocol>0</snmpv3_privprotocol>
					<snmpv3_privpassphrase/>
					<params>#!/bin/bash
cat &lt;&lt;EOF | python -
#!/usr/bin/python
import xml.etree.ElementTree as et
import json
import time
import datetime

### VARS ###
IGNORE_ALERT_LEVEL = &quot;{$IGNORE_ALERT_LEVEL}&quot;
IGNORE_ALERT_TYPE = &quot;{$IGNORE_ALERT_TYPE}&quot;
IGNORE_ALERT_SUBTYPE = &quot;{$IGNORE_ALERT_SUBTYPE}&quot;
IGNORE_ALERT_RESTYPE = &quot;{$IGNORE_ALERT_RESTYPE}&quot;
IGNORE_ALERT_LEVEL = map(str.strip, IGNORE_ALERT_LEVEL.split(','))
IGNORE_ALERT_TYPE = map(str.strip, IGNORE_ALERT_TYPE.split(','))
IGNORE_ALERT_SUBTYPE = map(str.strip, IGNORE_ALERT_SUBTYPE.split(','))
IGNORE_ALERT_RESTYPE = map(str.strip, IGNORE_ALERT_RESTYPE.split(','))
sherlockDir = '/var/Collector/'
alertsFile = sherlockDir + 'data/vrops_alerts_{$VROPS_IP}.xml'
resourcesFile = sherlockDir + 'data/vrops_resources_{$VROPS_IP}.xml'
typesFile = sherlockDir + 'data/vrops_types_{$VROPS_IP}.xml'
# Blelow VAR will ignore from alerts discovery alerts with status CANCELED and older than X hours.
ignoreCanceledOlderThanHours = 2

ns = {'ops': 'http://webservice.vmware.com/vRealizeOpsMgr/1.0/'}
first = 1
############

ignoreOlderThanSeconds = ignoreCanceledOlderThanHours * 60 * 60
alertsTree = et.parse(alertsFile)
alertsRoot = alertsTree.getroot()
resourcesTree = et.parse(resourcesFile)
resourcesRoot = resourcesTree.getroot()
typesTree = et.parse(typesFile)
typesRoot = typesTree.getroot()

def returnResName(resId):
    for resource in resourcesRoot.findall('ops:resource', ns):
        if resource.attrib['identifier'] == resId:
            resourceName = resource.find('ops:resourceKey/ops:name', ns)
            resourceKindKey = resource.find('ops:resourceKey/ops:resourceKindKey', ns)
            return resourceName.text, resourceKindKey.text

def returntypeData(typeID, subType):
    for _type in typesRoot.findall('ops:alert-type', ns):
        if _type.attrib['id'] == typeID:
            typeName = _type.find('ops:name', ns)
        for _subType in _type.findall('ops:subTypes', ns):
            if _subType.attrib['id'] == subType:
                subTypeName = _subType.find('ops:name', ns)
    return typeName.text, subTypeName.text

print('{')
print('&quot;data&quot;:[')

for alert in alertsRoot.findall('ops:alert', ns):
    status = alert.find('ops:status', ns)
    if status.text == &quot;CANCELED&quot;:
        updateTimeUTC = alert.find('ops:updateTimeUTC', ns)
        now = time.time()
        delta =  now - (int(updateTimeUTC.text) / 1000)
        if delta &gt;= ignoreOlderThanSeconds:
            continue
    alertLevel = alert.find('ops:alertLevel', ns)
    if alertLevel.text in IGNORE_ALERT_LEVEL:
        continue
    alertId = alert.find('ops:alertId', ns)
    resourceId = alert.find('ops:resourceId', ns)
    _type = alert.find('ops:type', ns)
    subType = alert.find('ops:subType', ns)
    alertDefinitionName = alert.find('ops:alertDefinitionName', ns)
    try:
        resourceName, resourceKindKey = returnResName(resourceId.text)
        if resourceKindKey in IGNORE_ALERT_RESTYPE:
            continue
    except:
        resourceName = &quot;Resource ID not found in API&quot;
        resourceKindKey = &quot;&quot;
    typeName, subTypeName = returntypeData(_type.text, subType.text)
    if typeName in IGNORE_ALERT_TYPE:
        continue
    if subTypeName in IGNORE_ALERT_SUBTYPE:
        continue
    startTimeUTC = alert.find('ops:startTimeUTC', ns)
    startTimeStr = datetime.datetime.fromtimestamp(int(startTimeUTC.text) / 1000).strftime('%Y-%m-%d %H:%M:%S')
    
    if first == 0:
        print(',')
    first = 0
    print('    {')
    print('        &quot;{#ALERTID}&quot;:&quot;' + alertId.text + '&quot;,')
    print('        &quot;{#RESNAME}&quot;:&quot;' + resourceName + '&quot;,')
    print('        &quot;{#RESTYPE}&quot;:&quot;' + resourceKindKey + '&quot;,')
    print('        &quot;{#LEVEL}&quot;:&quot;' + alertLevel.text + '&quot;,')
    print('        &quot;{#TIME}&quot;:&quot;' + startTimeStr + '&quot;,')
    print('        &quot;{#TYPE}&quot;:&quot;' + typeName + '&quot;,')
    print('        &quot;{#SUBTYPE}&quot;:&quot;' + subTypeName + '&quot;,')
    print('        &quot;{#DEF}&quot;:&quot;' + alertDefinitionName.text + '&quot;')
    print('    }')
print(&quot;]&quot;)
print(&quot;}&quot;)

EOF</params>
					<ipmi_sensor/>
					<authtype>0</authtype>
					<username>{$PROXY_SSH_ID}</username>
					<password>{$PROXY_SSH_PW}</password>
					<publickey/>
					<privatekey/>
					<port/>
					<filter>
						<evaltype>0</evaltype>
						<formula/>
						<conditions/>
					</filter>
					<lifetime>0</lifetime>
					<description/>
					<item_prototypes>
						<item_prototype>
							<name>{#RESNAME} ({#RESTYPE}) [{#TYPE}/{#SUBTYPE}] {#DEF} - Severity</name>
							<type>0</type>
							<snmp_community/>
							<snmp_oid/>
							<key>vropsAlertInfo[{$VROPS_IP}, {#ALERTID}, severity]</key>
							<delay>5m;m/5s30</delay>
							<history>60d</history>
							<trends>0</trends>
							<status>0</status>
							<value_type>4</value_type>
							<allowed_hosts/>
							<units/>
							<snmpv3_contextname/>
							<snmpv3_securityname/>
							<snmpv3_securitylevel>0</snmpv3_securitylevel>
							<snmpv3_authprotocol>0</snmpv3_authprotocol>
							<snmpv3_authpassphrase/>
							<snmpv3_privprotocol>0</snmpv3_privprotocol>
							<snmpv3_privpassphrase/>
							<params/>
							<ipmi_sensor/>
							<authtype>0</authtype>
							<username/>
							<password/>
							<publickey/>
							<privatekey/>
							<port/>
							<description/>
							<inventory_link>0</inventory_link>
							<applications>
								<application>
									<name>VROPS Alerts</name>
								</application>
							</applications>
							<valuemap/>
							<logtimefmt/>
							<preprocessing/>
							<jmx_endpoint/>
							<application_prototypes/>
							<master_item_prototype/>
						</item_prototype>
						<item_prototype>
							<name>{#RESNAME} ({#RESTYPE}) [{#TYPE}/{#SUBTYPE}] {#DEF} - Start Time</name>
							<type>0</type>
							<snmp_community/>
							<snmp_oid/>
							<key>vropsAlertInfo[{$VROPS_IP}, {#ALERTID}, startTime]</key>
							<delay>10m;m/10s30</delay>
							<history>60d</history>
							<trends>0</trends>
							<status>0</status>
							<value_type>4</value_type>
							<allowed_hosts/>
							<units/>
							<snmpv3_contextname/>
							<snmpv3_securityname/>
							<snmpv3_securitylevel>0</snmpv3_securitylevel>
							<snmpv3_authprotocol>0</snmpv3_authprotocol>
							<snmpv3_authpassphrase/>
							<snmpv3_privprotocol>0</snmpv3_privprotocol>
							<snmpv3_privpassphrase/>
							<params/>
							<ipmi_sensor/>
							<authtype>0</authtype>
							<username/>
							<password/>
							<publickey/>
							<privatekey/>
							<port/>
							<description/>
							<inventory_link>0</inventory_link>
							<applications>
								<application>
									<name>VROPS Alerts</name>
								</application>
							</applications>
							<valuemap/>
							<logtimefmt/>
							<preprocessing/>
							<jmx_endpoint/>
							<application_prototypes/>
							<master_item_prototype/>
						</item_prototype>
						<item_prototype>
							<name>{#RESNAME} ({#RESTYPE}) [{#TYPE}/{#SUBTYPE}] {#DEF} - Status</name>
							<type>0</type>
							<snmp_community/>
							<snmp_oid/>
							<key>vropsAlertInfo[{$VROPS_IP}, {#ALERTID}, status]</key>
							<delay>1m;m0-59s30</delay>
							<history>60d</history>
							<trends>0</trends>
							<status>0</status>
							<value_type>4</value_type>
							<allowed_hosts/>
							<units/>
							<snmpv3_contextname/>
							<snmpv3_securityname/>
							<snmpv3_securitylevel>0</snmpv3_securitylevel>
							<snmpv3_authprotocol>0</snmpv3_authprotocol>
							<snmpv3_authpassphrase/>
							<snmpv3_privprotocol>0</snmpv3_privprotocol>
							<snmpv3_privpassphrase/>
							<params/>
							<ipmi_sensor/>
							<authtype>0</authtype>
							<username/>
							<password/>
							<publickey/>
							<privatekey/>
							<port/>
							<description/>
							<inventory_link>0</inventory_link>
							<applications>
								<application>
									<name>VROPS Alerts</name>
								</application>
							</applications>
							<valuemap/>
							<logtimefmt/>
							<preprocessing/>
							<jmx_endpoint/>
							<application_prototypes/>
							<master_item_prototype/>
						</item_prototype>
					</item_prototypes>
					<trigger_prototypes>
						<trigger_prototype>
							<expression>{GTS-IS Template Virt VMware VROPS:vropsAlertInfo[{$VROPS_IP}, {#ALERTID}, status].str(ACTIVE)}=1 and {GTS-IS Template Virt VMware VROPS:vropsAlertInfo[{$VROPS_IP}, {#ALERTID}, severity].str(CRITICAL)}=1</expression>
							<recovery_mode>0</recovery_mode>
							<recovery_expression/>
							<name>{#RESNAME} ({#RESTYPE}) [{#TYPE}/{#SUBTYPE}] {#DEF}</name>
							<correlation_mode>0</correlation_mode>
							<correlation_tag/>
							<url/>
							<status>0</status>
							<priority>4</priority>
							<description/>
							<type>0</type>
							<manual_close>0</manual_close>
							<dependencies/>
							<tags/>
						</trigger_prototype>
						<trigger_prototype>
							<expression>{GTS-IS Template Virt VMware VROPS:vropsAlertInfo[{$VROPS_IP}, {#ALERTID}, status].str(ACTIVE)}=1 and {GTS-IS Template Virt VMware VROPS:vropsAlertInfo[{$VROPS_IP}, {#ALERTID}, severity].str(IMMEDIATE)}=1</expression>
							<recovery_mode>0</recovery_mode>
							<recovery_expression/>
							<name>{#RESNAME} ({#RESTYPE}) [{#TYPE}/{#SUBTYPE}] {#DEF}</name>
							<correlation_mode>0</correlation_mode>
							<correlation_tag/>
							<url/>
							<status>0</status>
							<priority>3</priority>
							<description/>
							<type>0</type>
							<manual_close>0</manual_close>
							<dependencies/>
							<tags/>
						</trigger_prototype>
						<trigger_prototype>
							<expression>{GTS-IS Template Virt VMware VROPS:vropsAlertInfo[{$VROPS_IP}, {#ALERTID}, status].str(ACTIVE)}=1 and {GTS-IS Template Virt VMware VROPS:vropsAlertInfo[{$VROPS_IP}, {#ALERTID}, severity].str(WARNING)}=1</expression>
							<recovery_mode>0</recovery_mode>
							<recovery_expression/>
							<name>{#RESNAME} ({#RESTYPE}) [{#TYPE}/{#SUBTYPE}] {#DEF}</name>
							<correlation_mode>0</correlation_mode>
							<correlation_tag/>
							<url/>
							<status>0</status>
							<priority>2</priority>
							<description/>
							<type>0</type>
							<manual_close>0</manual_close>
							<dependencies/>
							<tags/>
						</trigger_prototype>
					</trigger_prototypes>
					<graph_prototypes/>
					<host_prototypes/>
					<jmx_endpoint/>
				</discovery_rule>
			</discovery_rules>
			<httptests/>
			<macros>
				<macro>
					<macro>{$IGNORE_ALERT_LEVEL}</macro>
					<value/>
				</macro>
				<macro>
					<macro>{$IGNORE_ALERT_RESTYPE}</macro>
					<value/>
				</macro>
				<macro>
					<macro>{$IGNORE_ALERT_SUBTYPE}</macro>
					<value/>
				</macro>
				<macro>
					<macro>{$IGNORE_ALERT_TYPE}</macro>
					<value/>
				</macro>
				<macro>
					<macro>{$PROXY_SSH_ID}</macro>
					<value/>
				</macro>
				<macro>
					<macro>{$PROXY_SSH_PW}</macro>
					<value/>
				</macro>
				<macro>
					<macro>{$VROPS_ID}</macro>
					<value/>
				</macro>
				<macro>
					<macro>{$VROPS_IP}</macro>
					<value/>
				</macro>
				<macro>
					<macro>{$VROPS_PW}</macro>
					<value/>
				</macro>
			</macros>
			<templates/>
			<screens/>
		</template>
	</templates>
	<triggers>
		<trigger>
			<expression>{GTS-IS Template Virt VMware VROPS:ssh.run[createAlertsDatafile].nodata(1h)}=1</expression>
			<recovery_mode>0</recovery_mode>
			<recovery_expression/>
			<name>Not collecting alerts from VROPs server  {HOST.HOST}</name>
			<correlation_mode>0</correlation_mode>
			<correlation_tag/>
			<url/>
			<status>0</status>
			<priority>4</priority>
			<description/>
			<type>0</type>
			<manual_close>0</manual_close>
			<dependencies/>
			<tags/>
		</trigger>
		<trigger>
			<expression>{GTS-IS Template Virt VMware VROPS:ping_ip[{$VROPS_IP}].min(#5)}=0</expression>
			<recovery_mode>0</recovery_mode>
			<recovery_expression/>
			<name>VROPS server unavailable (failed 5 times)</name>
			<correlation_mode>0</correlation_mode>
			<correlation_tag/>
			<url/>
			<status>0</status>
			<priority>4</priority>
			<description/>
			<type>0</type>
			<manual_close>0</manual_close>
			<dependencies/>
			<tags/>
		</trigger>
	</triggers>
	<value_maps>
		<value_map>
			<name>Host availability</name>
			<mappings>
				<mapping>
					<value>0</value>
					<newvalue>Not available</newvalue>
				</mapping>
				<mapping>
					<value>1</value>
					<newvalue>Available</newvalue>
				</mapping>
				<mapping>
					<value>2</value>
					<newvalue>Unknown</newvalue>
				</mapping>
			</mappings>
		</value_map>
	</value_maps>
</zabbix_export>
